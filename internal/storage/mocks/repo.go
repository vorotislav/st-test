// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "st-test/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// DeleteAll provides a mock function with given fields:
func (_m *Repo) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type Repo_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
func (_e *Repo_Expecter) DeleteAll() *Repo_DeleteAll_Call {
	return &Repo_DeleteAll_Call{Call: _e.mock.On("DeleteAll")}
}

func (_c *Repo_DeleteAll_Call) Run(run func()) *Repo_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repo_DeleteAll_Call) Return(_a0 error) *Repo_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_DeleteAll_Call) RunAndReturn(run func() error) *Repo_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: item
func (_m *Repo) Insert(item models.Item) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Item) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Repo_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - item models.Item
func (_e *Repo_Expecter) Insert(item interface{}) *Repo_Insert_Call {
	return &Repo_Insert_Call{Call: _e.mock.On("Insert", item)}
}

func (_c *Repo_Insert_Call) Run(run func(item models.Item)) *Repo_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Item))
	})
	return _c
}

func (_c *Repo_Insert_Call) Return(_a0 error) *Repo_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_Insert_Call) RunAndReturn(run func(models.Item) error) *Repo_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAll provides a mock function with given fields:
func (_m *Repo) ReadAll() ([]models.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadAll")
	}

	var r0 []models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type Repo_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
func (_e *Repo_Expecter) ReadAll() *Repo_ReadAll_Call {
	return &Repo_ReadAll_Call{Call: _e.mock.On("ReadAll")}
}

func (_c *Repo_ReadAll_Call) Run(run func()) *Repo_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repo_ReadAll_Call) Return(_a0 []models.Item, _a1 error) *Repo_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_ReadAll_Call) RunAndReturn(run func() ([]models.Item, error)) *Repo_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
