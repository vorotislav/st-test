// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "st-test/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, id
func (_m *Storage) GetObject(ctx context.Context, id int) (models.Item, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Item, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Item); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type Storage_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Storage_Expecter) GetObject(ctx interface{}, id interface{}) *Storage_GetObject_Call {
	return &Storage_GetObject_Call{Call: _e.mock.On("GetObject", ctx, id)}
}

func (_c *Storage_GetObject_Call) Run(run func(ctx context.Context, id int)) *Storage_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Storage_GetObject_Call) Return(_a0 models.Item, _a1 error) *Storage_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetObject_Call) RunAndReturn(run func(context.Context, int) (models.Item, error)) *Storage_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// SaveObject provides a mock function with given fields: ctx, item
func (_m *Storage) SaveObject(ctx context.Context, item models.Item) (int, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for SaveObject")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Item) (int, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Item) int); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_SaveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveObject'
type Storage_SaveObject_Call struct {
	*mock.Call
}

// SaveObject is a helper method to define mock.On call
//   - ctx context.Context
//   - item models.Item
func (_e *Storage_Expecter) SaveObject(ctx interface{}, item interface{}) *Storage_SaveObject_Call {
	return &Storage_SaveObject_Call{Call: _e.mock.On("SaveObject", ctx, item)}
}

func (_c *Storage_SaveObject_Call) Run(run func(ctx context.Context, item models.Item)) *Storage_SaveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Item))
	})
	return _c
}

func (_c *Storage_SaveObject_Call) Return(_a0 int, _a1 error) *Storage_SaveObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_SaveObject_Call) RunAndReturn(run func(context.Context, models.Item) (int, error)) *Storage_SaveObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
